---
layout: post
title:  "API First Development (1)"
date:   2019-11-01 16:53:48 +0900
categories: Development
---

## API 문서

서버-클라이언트가 존재하는 일반적인 Application의 경우, API 문서는 필수적인 존재이다.
특히나, 마이크로서비스와 같이 수많은 API의 거미줄에서 API 문서도 없이 원하는 기능을 찾아 요청을 보내는것이 가능이나 할까?

아이폰 Application에서 User interface가 터치스크린이라면, API 서버에서의 User interface는 바로 문서이다.
잊지말자, 클라이언트 엔지니어는 API 서버의 사용자(User)이다.

잘 만들어진 API는 불필요한 커뮤니케이션 비용을 줄이고, 클라이언트 사이드에서의 빠른 구현이 가능하게 만들어준다.

## API 문서를 만드는 것은 힘들다

빠르게 만들어 나가는 제품의 경우 API의 스펙은 시시때때로 변할것이고,
클라이언트 엔지니어는 서버 엔지니어가 API를 완성하고 문서로 정리해 줄 때 까지 가만히 앉아 손가락만 빨고 있는 상황이 반복될 것이다.

API를 다 만들더라도, 서버 엔지니어에게는 API를 문서로 옮겨야 하는 작업이 기다리고 있다. 하지만 급하게 두서없이 작성한 코드에서
본인이 의도한 내용들을 다 기억하고, 구조화하여 문서로 문제 없이 옮길 수 있을까?

만약 API 스펙이 변경되면 어떻게 될까? 많은 업무에 지친 서버 엔지니어는 과연 놓치지 않고 성실히 문서를 업데이트 할 수 있을까?

위와 같은 API의 문서화, 유지보수는 팀에게 있어서 스트레스로 다가오게 된다.

## 문제점

윗 단락에서 이야기한 문제에 대해 정리해보면 다음과 같은 내용이 있다.

1. 개발단계에서의 API 문서의 부재

2. 정확한 API 문서 작성의 어려움

3. API 문서의 유지 및 관리

## 원인

API 문서를 작성하면 좋다면서, 왜 이런 문제가 발생하는 것일까? 이럴바에 그냥 문서는 제끼고 빨리 구현체를 찍어내는것이 이득 아닌가?

하지만 이러한 것들은 API와 문서화에 대한 몇가지 고정관념에서 발생하는 문제이다.

### 1. API 문서는 API가 구현된 후에 작성하는 것이라는 생각

API 문서화에 스트레스를 받는 조직의 상당수는 API 문서화를 개발 후에 있는 밀린 숙제 처럼 취급하고 있을 것이다.

마치 열심히 출장을 다녀온 직장인이 회사에 돌아왔는데, 회사에선 빨리 출장 보고서를 제출하라고 닥달하는 것과 같은것이다.

하지만 API 문서는 보고서가 아닌 계획서와 구현 일지로 생각한다면 어떨까?. 실제로 계획대로 이루어지지는 않을 수도 있지만
구현을 위한 가이드라인을 제시하며 작업중 변경된 내용이 있으면 미리 작성한 내용에서 조금씩 수정해 나가는것이다.

### 2. API의 구현과 문서화는 별개의 작업이라는 생각

사실 API 문서를 구현 전에 작성하는가, 구현 후에 작성하는가의 문제가 아니다. API 문서화를 구현 프로세스의 일부분으로 넣는다면
자연스럽게 문서화를 할 수 있지 않은가?

API 구현과 문서화가 항상 한 쌍으로 같이 다닌다면, 실제로 같이 처리하면 될 일이다. 구현이 변경되면 문서도 함께 변결될 것이고, 구현체가 관리된다면
문서도 자연스레 관리될 것이다.

## API First

사실 API First 라는 용어를 설명하려고 이 글을 작성하는것은 아니다. 같은 주제에 대해 이야기 하다 보니 이러한 용어도 있다는것을 알게 되었을 뿐이다.

하지만 API First 라는 용어 자체가 이 글에서 하고자 하는 이야기를 잘 설명해주는것 같아 소개해본다.

API First에서는

1. 구현보다 API(문서)를 먼저 작성한다.

2. 구현은 동적으로 변하지만 API는 정적이어야 한다.

3. 모든 API는 설명되어야 한다.

라는 원칙들을 제시한다.

## 그래서 무슨 이야기를 하고싶은가

나는 API First와 같은 API 스펙을 주도로 한 개발 방법에 대해 오랜기간 고민해왔고, 많은 시행착오 끝에 만족스러울만한 개발 프로세스를 만들어 내었다.

이 이후의 글에서는 API First를 실천하기 위해서 겪었던 나의 시행착오와 [OpenAPI (Swagger)][OpenAPI]에서 [gRPC][gRPC]로 가기 까지의 과정, 그리고
현재 개발하는데 사용하고 있는 프로세스를 공유해 보고자 한다.


[OpenAPI]: https://openapis.org
[gRPC]: http://grpc.io
